// Transferred via https://transform.tools/typescript-to-javascript
import fs from 'fs';
import assert from 'assert';
import MagicString from 'magic-string';
import { walk } from 'estree-walker';
import semver from 'semver';

const testLoadedPlugin = config => {
    const { name, version, title, desktopUI, mobileUI, routerPath, icon } = config;

    assert(
        typeof name === 'string' && /^windy-plugin-([a-z0-9-]+)$/.test(name),
        'Plugin name MUST be prefixed with windy-plugin- string and can contain only lowercase letters, numbers and dashes',
    );

    assert(
        typeof version === 'string' && semver.valid(version),
        'Plugin version is not defined or is not in SemVer format (example: 1.3.7)',
    );

    assert(
        typeof icon === 'string' &&
            (icon.length === 1 || /^[\u{0000}-\u{10FFFF}]{1,4}$/u.test(icon)),
        'Plugin icon must be just single emoji character',
    );

    assert(
        !routerPath ||
            (typeof routerPath === 'string' &&
                routerPath.length > 4 &&
                /^\/[a-z0-9-/:?]+$/.test(routerPath)),
        'Router path MUST be longer than 4 characters and can contain only lowercase letters, numbers and dashes (example hello-world). It must have leading slash "/".',
    );

    assert(
        typeof title === 'string' && title.length > 7 && title.length < 50,
        'Plugin title is not defined or is too short or too long',
    );

    assert(
        typeof desktopUI === 'string' && desktopUI.match(/^(rhpane|embedded)$/),
        'Plugin desktopUI is not defined or is not one of allowed values',
    );

    assert(
        typeof mobileUI === 'string' && mobileUI.match(/^(fullscreen|small|embedded)$/),
        'Plugin mobileUI is not defined or is not one of allowed values',
    );
};

/**
 * Replaces @windy/, @plugins/ virtual imports in the given AST with the appropriate code modifications.
 *
 * @param ast - The Abstract Syntax Tree (AST) representing the code.
 * @param msCode - The MagicString object representing the code with source maps.
 */
const replaceVirualImports = (ast, msCode) => {
    walk(ast, {
        enter(node) {
            if (node.type === 'ImportDeclaration') {
                const source = node.source.value?.toString() || '';
                const { start, end, specifiers } = node;

                const removeEmptyImpoert = () => {
                    const originalString = msCode.slice(start, end);
                    msCode.overwrite(
                        start,
                        end,
                        `// transformCode (empty import): ${originalString}`,
                    );
                };

                if (source.startsWith('@windy/')) {
                    if (!specifiers || !specifiers.length) {
                        // Empty useless import line like: import '@windy/whatever';
                        removeEmptyImpoert();
                    } else {
                        const originalString = msCode.slice(start, end);
                        const windyModuleId = source.replace('@windy/', '');
                        let newCode = `// transformCode: ${originalString}\n`;

                        const multipleSpecifiers = [];
                        for (const specifier of specifiers) {
                            if (specifier.type === 'ImportSpecifier') {
                                // named imports
                                if (specifier.imported.name === specifier.local.name) {
                                    multipleSpecifiers.push(specifier.local.name);
                                } else {
                                    multipleSpecifiers.push(
                                        `${specifier.imported.name}: ${specifier.local.name}`,
                                    );
                                }
                            } else {
                                // default import, or import to one variable
                                newCode += `const ${specifier.local.name} = W.${windyModuleId};\n`;
                            }
                        }
                        if (multipleSpecifiers.length) {
                            newCode += `const { ${multipleSpecifiers.join(
                                ', ',
                            )} } = W.${windyModuleId};\n`;
                        }
                        msCode.overwrite(start, end, newCode);
                    }
                }
            }
        },
    });
};

/**
 * Replaces the export statements in the given AST with a modified export statement.
 * If no export statements are found, a new export statement is added.
 *
 * @param ast - The Abstract Syntax Tree (AST) of the code.
 * @param msCode - The MagicString instance representing the code.
 * @param addedLiterars - An array of additional literals to be exported.
 */
const replaceExports = (ast, msCode, addedLiterars) => {
    let exportWasReplaced = false;
    walk(ast, {
        enter(node) {
            if (node.type === 'ExportNamedDeclaration') {
                const { start, end, specifiers } = node;
                const specifierLiterals = specifiers?.map(s => {
                    if (s.local.name === s.exported.name) {
                        return s.local.name;
                    } else {
                        return `${s.local.name} as ${s.exported.name}`;
                    }
                });
                const newExports = [...addedLiterars, ...specifierLiterals];
                const newCode = `\n// transformCode: Export statement was modified\nexport { ${newExports.join(
                    ', ',
                )} };\n`;
                msCode.append(newCode);
                msCode.remove(start, end);
                exportWasReplaced = true;
            }
        },
    });

    if (!exportWasReplaced) {
        const newCode = `\n// transformCode: Export statement was added\nexport { ${addedLiterars.join(
            ', ',
        )} };\n`;
        msCode.append(newCode);
    }
};

/**
 * Transforms the code based on the provided parameters.
 */
const transformCode = async (code, sourcemaps, pluginContext, path, output) => {
    const ast = pluginContext.parse(code);
    const msCode = new MagicString(code);

    replaceVirualImports(ast, msCode);

    const configPath = `${path}/pluginConfig.ts`;
    let screenshot;

    // Copy screenshot.jpg/png/webp/jpeg to the output directory
    try {
        for (const type of ['jpg', 'png', 'webp', 'jpeg']) {
            const screenshotPath = `${path}/screenshot.${type}`;
            if (fs.existsSync(screenshotPath)) {
                fs.copyFileSync(screenshotPath, `${output}/screenshot.${type}`);
                screenshot = `screenshot.${type}`;
                break;
            }
        }
    } catch (e) {
        console.error(`Error while copying screenshot`, e);
    }

    try {
        // This part of code reads the pluginConfig.ts file and
        // make the most stupid regex/eval extracting of the object
        // properties. It is not perfect, but it works.
        const configFile = fs.readFileSync(configPath, 'utf8');
        const getObjectParser = /^[^{]+(?<body>{(?:[^}]*name:[^}]+)+})[^}]+$/gm; // https://regex101.com/r/0VX3vT/2
        const dirtyBody = getObjectParser.exec(configFile)?.groups?.body;
        const pluginConfig = eval(`(${dirtyBody})`);

        testLoadedPlugin(pluginConfig);

        pluginConfig.built = Date.now();
        pluginConfig.builtReadable = new Date().toISOString();
        pluginConfig.screenshot = screenshot;

        const formattedConfig = JSON.stringify(pluginConfig, undefined, 2);

        fs.writeFileSync(`${output}/plugin.json`, formattedConfig);

        msCode.prepend(`const __pluginConfig =  ${formattedConfig};\n\n`);
    } catch (e) {
        console.error(`Error while opening and parsing ${configPath}`, e);
        process.exit(1);
    }

    replaceExports(ast, msCode, ['__pluginConfig']);

    return {
        code: msCode.toString(),
        map: sourcemaps ? msCode.generateMap({ hires: true }) : undefined,
    };
};

/**
 * Creates a Rollup plugin that transforms code to ESM format with our enhancements
 * @returns The Rollup plugin.
 */
export function transformCodeToESMPlugin() {
    let shouldGenerateSourcemaps = false;
    let outputDirectory = null;
    return {
        name: 'transform-to-esm-plugin',
        options(options) {
            const outputOptions = Array.isArray(options.output)
                ? options.output[0]
                : options.output ?? {};

            shouldGenerateSourcemaps = Boolean(outputOptions.sourcemap);
            outputDirectory = outputOptions.file.replace(/\/[^/]+$/, '');

            return undefined;
        },
        renderChunk(code, chunk) {
            const { facadeModuleId } = chunk;
            const pathOfTheFile = facadeModuleId.replace(/\/[^/]*$/, '');

            if (!fs.existsSync(outputDirectory)) {
                fs.mkdirSync(outputDirectory, { recursive: true });
            }

            return transformCode(
                code,
                shouldGenerateSourcemaps,
                this,
                pathOfTheFile,
                outputDirectory,
            );
        },
    };
}

export const certificatePEM = `
-----BEGIN CERTIFICATE-----
MIIDWTCCAkGgAwIBAgIJAJsJO7x13pwAMA0GCSqGSIb3DQEBCwUAMEMxCzAJBgNV
BAYTAkNaMRAwDgYDVQQIDAdDemVjaGlhMQ4wDAYDVQQKDAVXaW5keTESMBAGA1UE
AwwJbG9jYWxob3N0MB4XDTE4MTAyNTEyMzc1NloXDTI4MTAyMjEyMzc1NlowQzEL
MAkGA1UEBhMCQ1oxEDAOBgNVBAgMB0N6ZWNoaWExDjAMBgNVBAoMBVdpbmR5MRIw
EAYDVQQDDAlsb2NhbGhvc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
AQDKLfu9uX9A97rUE0kTGa7COeShMz4SJVQI+2Z7dV+6MC42rNpvbPjyWMKMjMTi
p6ARYrDtG6ARNETV+RIYBOIAEU5InKGJNdpOSlTxFq87XDTwdYtG9XLYhQZTOFSk
DjgwZkFfcXDbnhwzyu2tF+nPP1kt7k0qt0AwNn/QI3RvRlWC9gpX644xHyJPp6H7
6M4gxYvNw9Eh+UrbAbp27+tnQEd+qQi9adK3qi2C0GL787HEhIA18A4EJY7PIrIN
NjD4r9IiFF78pZFXEUszE2aE4GVe8v12VmhRPntPUgKLskFZAuAnKOxan8zar7b5
bIDq9M0l/+JqN7x+nB9Cx9kLAgMBAAGjUDBOMB0GA1UdDgQWBBSCb0qLtMQ8cub9
Go4xvwJfsWh0azAfBgNVHSMEGDAWgBSCb0qLtMQ8cub9Go4xvwJfsWh0azAMBgNV
HRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAJTqnecj58DrQXvWFwyewbWH2Q
hkv6vggR6+yM3J63bm4MBYjHs2Ut21TFlcN6ItwzIPP0prVgGrbrx7L6vJNDaDVO
ycaSicw++fuIIFZzmvn7ALQbRz4KtmmUqT/m6WoGyhWolDjweaPZDcmbErw8XZrk
rNWi3It/WA5COBxVdPzgv6vyB6FmZKNgqgaRO1NUXcNenGGR+V3CFwhmCsXsiM0G
L2eqlverl/YyiFUECWXsUmjpVnt86px7NXMsdBOLHJyJMAB2iLgR7gy/StV1zxSX
l48WMLKAXRnbcrsrAUXgfkJbaviTyvCgwFmx99yc4oP9onbEbNQJdp4gTrat
-----END CERTIFICATE-----
`;

export const keyPEM = `
-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDKLfu9uX9A97rU
E0kTGa7COeShMz4SJVQI+2Z7dV+6MC42rNpvbPjyWMKMjMTip6ARYrDtG6ARNETV
+RIYBOIAEU5InKGJNdpOSlTxFq87XDTwdYtG9XLYhQZTOFSkDjgwZkFfcXDbnhwz
yu2tF+nPP1kt7k0qt0AwNn/QI3RvRlWC9gpX644xHyJPp6H76M4gxYvNw9Eh+Urb
Abp27+tnQEd+qQi9adK3qi2C0GL787HEhIA18A4EJY7PIrINNjD4r9IiFF78pZFX
EUszE2aE4GVe8v12VmhRPntPUgKLskFZAuAnKOxan8zar7b5bIDq9M0l/+JqN7x+
nB9Cx9kLAgMBAAECggEBAKIE/ZNJ3t+KZs7i8ZF76F8/k6dW8CwMe+6CwNq48dC8
IZyxIo9erZVQaf/GI1VbbVvhUdWBaOHAmFU8tzJGX3IcbDamRpE1dc99o9pcCmsw
dkAogkeIFNPMrofsQXAC8SZgG41H1GA6sXET8yneWwE5S9cR/Ab6OVcppX1/nCQ6
tSLCTi5Uxqq1T2qdVPwGsm0GtE3XvLkfhoQBjt46T+pOVECshkFIIcpRdLaK/Q7+
PUfQDEgmsqV1qViLMm01nFJTHlZvL3rVS64HojPXXB6gtuCAN7K9RKWUlwhlklPb
M+ydISklWwbvLbIqALKsGqeLk7tf9FHd7WFJHUnTkkkCgYEA6wnYfTAGuAoAHMoa
7mVrSqxytlKcudnkr0LaTvBQ0o0IRLPi21kZIZzjT6jt5SSZmwZzvwr0TFCCuvHW
wfJnSdYCy/oB/g4D2oViGKus4sbzlS1MOvPNzlUzyp1h2ugdgBlyCzopn9MgZQVg
uOyzY34ChIdhyDE8yWmOI9cQSqUCgYEA3DXwViUToYuvgjq3+UfZDFMjSYJd3LOO
NjzhRxNxWZJxEXbO799m/zDSmWUJU/wPTJcIyM9eYcRxCoj2JyyLy0dGmq/2n8Nv
hQj0NpeEdpm6dn0kJMnNgSeqrjbMIlkgYkafp+24lbUnyiJV8akV/twYylBOfCuQ
jKKov0pGNe8CgYEA47RSLFZO7BWkLkAO/076NwoCyGgYtmVGjBT0cu2XH6TKkeTE
r0UOd+YKwq4ia5Cdz/bcRAVU0GpffMW3DYbOUlYnt32qWHszeI0okEYh5EJi0e9k
nuh8Rp1845q9ptqhWe1M81uR3+kmxTgEkKOg147I2aRfMxegkHDW6Bn/CpECgYB2
3C5jcRPNiIYtNuCCjwNaoa1USie7rrc+E1JNePMfs+mP0Z8U3nLLn2CtJ1oHmO/x
GTzGlxeMkemqFA85SdQS3t//MqddyLFzD0gyB0qacZOxzQ4rRTnFUtHPwwggKhdO
tGwMykVtmSBm/G2DSQ70R3yiBwK2BxW4szt+NOr8xQKBgFZKzJJJCI7tIx4Q4W6u
eXBYiWI6UlNpl7NRaaomk1rfIF6mZwN4jdNMSCaYxMRS6AeMBLF7a3t1SaZ+rOAM
h3aspktieVxk6EW6XE5niS8FphEdWc2ttqPYTEH/xlnyk5huBtgUbIWfjdK2sPcy
5MnCHcPPkW3bLxyZSC9y84aP
-----END PRIVATE KEY-----
`;
